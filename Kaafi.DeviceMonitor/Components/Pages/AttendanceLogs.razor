@page "/attendance"
@using Kaafi.DeviceMonitor.Models
@using Kaafi.DeviceMonitor.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<script>
    window.downloadFile = (filename, content) => {
        const blob = new Blob([content], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };
</script>

<PageTitle>Attendance Logs</PageTitle>

<h1>Attendance Logs</h1>

<p>View and manage attendance records</p>

<div class="card">
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-3">
                <label class="form-label">Employee</label>
                <input type="text" class="form-control" placeholder="Search employee..." @bind="employeeFilter" @bind:event="oninput" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Date From</label>
                <input type="date" class="form-control" @bind="dateFrom" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Date To</label>
                <input type="date" class="form-control" @bind="dateTo" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Device</label>
                <select class="form-control" @bind="deviceFilter">
                    <option value="">All Devices</option>
                    @foreach (var device in devices)
                    {
                        <option value="@device.Id">@device.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
            <button class="btn btn-success" @onclick="ExportToCSV">Export to CSV</button>
            <button class="btn btn-info" @onclick="ToggleRealTime">@(realTimeEnabled ? "Disable" : "Enable") Real-time Updates</button>
        </div>
    </div>
</div>

@if (attendanceRecords == null)
{
    <p><em>Loading...</em></p>
}
else if (!attendanceRecords.Any())
{
    <p>No attendance records found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Employee</th>
                    <th>Date/Time</th>
                    <th>Device</th>
                    <th>In/Out</th>
                    <th>Photo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in attendanceRecords)
                {
                    <tr>
                        <td>@record.Employee?.FullName (@record.Employee?.Code)</td>
                        <td>@record.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@record.Device?.Name</td>
                        <td>
                            <span class="badge @(record.InOut == "IN" ? "bg-success" : "bg-danger")">
                                @record.InOut
                            </span>
                        </td>
                        <td>
                            @if (record.Photo != null)
                            {
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(record.Photo)" alt="Photo" style="width: 50px; height: 50px; object-fit: cover;" />
                            }
                            else
                            {
                                <span class="text-muted">No photo</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (totalPages > 1)
    {
        <nav aria-label="Attendance pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" @onclick="() => ChangePage(i)">@i</a>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    }
}

@code {
    private List<Attendance>? attendanceRecords;
    private List<Device>? devices;
    private string employeeFilter = string.Empty;
    private DateTime? dateFrom;
    private DateTime? dateTo;
    private string deviceFilter = string.Empty;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private bool realTimeEnabled = false;
    private Timer? realTimeTimer;

    protected override async Task OnInitializedAsync()
    {
        devices = await DbContext.Devices.ToListAsync();
        await LoadAttendanceAsync();
    }

    private async Task LoadAttendanceAsync()
    {
        var query = DbContext.Attendances
            .Include(a => a.Employee)
            .Include(a => a.Device)
            .AsQueryable();

        if (!string.IsNullOrWhiteSpace(employeeFilter))
        {
            query = query.Where(a => a.Employee != null && (a.Employee.FullName.Contains(employeeFilter) || a.Employee.Code.Contains(employeeFilter)));
        }

        if (dateFrom.HasValue)
        {
            query = query.Where(a => a.Timestamp >= dateFrom.Value.Date);
        }

        if (dateTo.HasValue)
        {
            query = query.Where(a => a.Timestamp <= dateTo.Value.Date.AddDays(1));
        }

        if (!string.IsNullOrWhiteSpace(deviceFilter))
        {
            var deviceId = int.Parse(deviceFilter);
            query = query.Where(a => a.DeviceId == deviceId);
        }

        var totalRecords = await query.CountAsync();
        totalPages = (int)Math.Ceiling(totalRecords / (double)pageSize);

        attendanceRecords = await query
            .OrderByDescending(a => a.Timestamp)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadAttendanceAsync();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadAttendanceAsync();
        }
    }

    private async Task ExportToCSV()
    {
        var csv = "Employee,Date/Time,Device,In/Out\n";
        foreach (var record in attendanceRecords ?? new())
        {
            csv += $"{record.Employee?.FullName} ({record.Employee?.Code}),{record.Timestamp.ToLocalTime():yyyy-MM-dd HH:mm:ss},{record.Device?.Name},{record.InOut}\n";
        }

        await JSRuntime.InvokeVoidAsync("downloadFile", "attendance.csv", csv);
    }

    private void ToggleRealTime()
    {
        realTimeEnabled = !realTimeEnabled;
        if (realTimeEnabled)
        {
            realTimeTimer = new Timer(async _ => await LoadAttendanceAsync(), null, 0, 30000); // Refresh every 30 seconds
        }
        else
        {
            realTimeTimer?.Dispose();
            realTimeTimer = null;
        }
    }

    public void Dispose()
    {
        realTimeTimer?.Dispose();
    }
}