@using Kaafi.DeviceMonitor.Services
@inject ToastService ToastService

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    @foreach (var toast in toasts)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @GetHeaderClass(toast.Type)">
                <strong class="me-auto">@toast.Title</strong>
                <button type="button" class="btn-close" @onclick="() => RemoveToast(toast)"></button>
            </div>
            <div class="toast-body">
                @toast.Message
            </div>
        </div>
    }
</div>

@code {
    private List<ToastMessage> toasts = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private void ShowToast(string message, string title, string type)
    {
        var toast = new ToastMessage
        {
            Message = message,
            Title = title,
            Type = type,
            Id = Guid.NewGuid()
        };

        toasts.Add(toast);

        // Auto remove after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() => RemoveToast(toast));
        });

        StateHasChanged();
    }

    private void RemoveToast(ToastMessage toast)
    {
        toasts.Remove(toast);
        StateHasChanged();
    }

    private string GetHeaderClass(string type)
    {
        return type switch
        {
            "success" => "bg-success text-white",
            "error" => "bg-danger text-white",
            "warning" => "bg-warning",
            "info" => "bg-info",
            _ => ""
        };
    }

    private class ToastMessage
    {
        public Guid Id { get; set; }
        public string Message { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
    }
}